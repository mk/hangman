Elm.NativeUi = Elm.NativeUi || {};
Elm.NativeUi.NativeApp = Elm.NativeUi.NativeApp || {};
Elm.NativeUi.NativeApp.make = function (_elm) {
       "use strict";
       _elm.NativeUi = _elm.NativeUi || {};
       _elm.NativeUi.NativeApp = _elm.NativeUi.NativeApp || {};
       if (_elm.NativeUi.NativeApp.values)    return _elm.NativeUi.NativeApp.values;
       var _U = Elm.Native.Utils.make(_elm),
       $Basics = Elm.Basics.make(_elm),
       $Debug = Elm.Debug.make(_elm),
       $List = Elm.List.make(_elm),
       $Maybe = Elm.Maybe.make(_elm),
       $NativeUi = Elm.NativeUi.make(_elm),
       $Result = Elm.Result.make(_elm),
       $Signal = Elm.Signal.make(_elm);
       var _op = {};
       var Config = F3(function (a,b,c) { return {model: a,view: b,update: c};});
       var ConfigAction = function (a) { return {ctor: "ConfigAction",_0: a};};
       var start = function (config) {
          var normalUpdate = F2(function (maybeAction,model) {
                                var _p0 = maybeAction;
                                if (_p0.ctor === "Just") {
                                   return A2(config.update,_p0._0,model);
                                } else {
                                   return _U.crashCase("NativeUi.NativeApp"
                                                      ,{start: {line: 41,column: 7},end: {line: 46,column: 50}}
                                                      ,_p0)("This should never happen.");
                                }
                             });
          var update = F2(function (action,model) {
                          var _p2 = action;
                          if (_p2.ctor === "ConfigAction") {
                             return A2(normalUpdate,_p2._0,model);
                          } else {
                             return model;
                          }
                       });
          var actions = $Signal.mailbox($Maybe.Nothing);
          var merged = $Signal.mergeMany(_U.list([A2($Signal.map,ConfigAction,actions.signal)]));
          var model = A3($Signal.foldp,update,config.model,merged);
          var address = A2($Signal.forwardTo,actions.address,$Maybe.Just);
          return A2($Signal.map,config.view(address),model);
       };
       var Init = {ctor: "Init"};
       return _elm.NativeUi.NativeApp.values = {_op: _op,start: start};
    };